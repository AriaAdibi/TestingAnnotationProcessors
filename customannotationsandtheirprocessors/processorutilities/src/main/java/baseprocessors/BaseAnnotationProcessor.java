package baseprocessors;

import com.google.common.base.Predicates;
import com.google.common.collect.*;
import lombok.Data;
import lombok.NonNull;

import javax.annotation.processing.*;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Name;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.ErrorType;
import javax.lang.model.util.Elements;
import javax.lang.model.util.Types;
import javax.tools.Diagnostic;
import java.util.LinkedHashSet;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;

import static baseprocessors.MoreElements.getEnclosingType;
import static com.google.common.base.Preconditions.checkState;
import static com.google.common.collect.ImmutableSet.toImmutableSet;
import static com.google.common.collect.Iterables.transform;
import static com.google.common.collect.Multimaps.filterKeys;

/**
 * An abstract {@link Processor} implementation that defers processing of {@link Element}s to later
 * rounds if they cannot be processed. //TODO
 *
 * <p>Subclasses put their processing logic in {@link ProcessingStep} implementations. The processing steps are passed to
 * the processor by returning them in the {@link #processingSteps()} method, and can access the {@link
 * ProcessingEnvironment} using {@link #processingEnv}.
 *
 * <p>Any logic that needs to happen once per round can be specified by overriding {@link
 * #postRoundProcess(RoundEnvironment)}. //TODO
 *
 * <h3>Ill-formed elements are deferred</h3>
 *
 * Any annotated element whose nearest enclosing type is not well-formed is deferred, and not passed
 * to any {@code ProcessingStep}. This helps processors to avoid many common pitfalls, such as {@link
 * ErrorType} instances, {@link ClassCastException}s and badly coerced types.
 *
 * <p>A non-package element is considered well-formed if its type, type parameters, parameters,
 * default values, supertypes, annotations, and enclosed elements are. Package elements are treated
 * similarly, except that their enclosed elements are not validated. See {@link
 * SuperficialValidation#validateElement(Element)} for details.
 *
 * <p>The primary disadvantage to this validation is that any element that forms a circular
 * dependency with a type generated by another {@code BasicAnnotationProcessor} will never compile
 * because the element will never be fully complete. All such compilations will fail with an error
 * message on the offending type that describes the issue.
 *
 * <h3>Each {@code ProcessingStep} can defer elements</h3>
 *
 * <p>Each {@code ProcessingStep} can defer elements by including them in the set returned by {@link
 * ProcessingStep#process(ImmutableSetMultimap)}; elements deferred by a step will be passed back to that step
 * in a later round of processing.
 *
 * <p>This feature is useful when one processor may depend on code generated by another, independent
 * processor, in a way that isn't caught by the well-formedness check described above. For example,
 * if an element {@code A} cannot be processed because processing it depends on the existence of
 * some class {@code B}, then {@code A} should be deferred until a later round of processing, when
 * {@code B} will have been generated by another processor.
 *
 * <p>If {@code A} directly references {@code B}, then the well-formedness check will correctly
 * defer processing of {@code A} until {@code B} has been generated.
 *
 * <p>However, if {@code A} references {@code B} only indirectly (for example, from within a method
 * body), then the well-formedness check will not defer processing {@code A}, but a processing step
 * can reject {@code A}.
 */
public abstract class BaseAnnotationProcessor extends AbstractProcessor {

  /* ProcessingSteps, to be implemented by the user */
  /**
   * The unit of processing logic that runs under the guarantee that all elements are complete and
   * well-formed. A {@code ProcessingStep} may reject elements that are not ready for processing but may be at a later
   * steps and rounds.
   */
  public interface ProcessingStep {

    /**
     * The set of fully-qualified annotation type names processed by this {@code ProcessingStep}.
     *
     * @return the set of fully-qualified annotation type names processed by this {@code ProcessingStep}.
     *
     * <p><strong>Warning</strong>: If the returned names are not the names of annotations, they'll be <em>ignored</em>.
     */
    Set<String> annotations(); //TODO Is String a good choice?

    /**
     * The implementation of processing logic for the {@code ProcessingStep}. It is guaranteed that the keys in {@code
     * elementsByAnnotation} will be a subset of the set returned by {@link #annotations()}.
     *
     * @param elementsByAnnotation the elements to be processed mapped to their invoking annotation. It is
     * guaranteed that the keys in {@code elementsByAnnotation} will be a subset of the set returned by {@link #annotations()}.
     *
     * @return the elements (a subset of the values of {@code elementsByAnnotation}) that this {@code ProcessingStep}
     * is unable to process at the current processing step. These elements are deferred and will be considered again in
     * future steps and rounds of processing, until either properly processed or reported as not processed elements.
     */
    Set<? extends Element> process(ImmutableSetMultimap<String, Element> elementsByAnnotation);
  }

  /**
   * {@linkplain ProcessingStep}s provided by the user for this processor. {@link #processingEnv} is
   * guaranteed to be set when this method is invoked.
   *
   * @return {@linkplain ProcessingStep}s provided by the user for this processor.
   */
  protected abstract Iterable<? extends ProcessingStep> processingSteps();

  /**
   * An optional hook for logic to be executed at the beginning of each round.
   * @param roundEnv {@code RoundEnvironment} of the processor.
   */
  protected abstract void preRoundProcess(RoundEnvironment roundEnv);

  /**
   * An optional hook for logic to be executed at the end of each round.
   * @param roundEnv {@code RoundEnvironment} of the processor.
   */
  protected abstract void postRoundProcess(RoundEnvironment roundEnv);

  /** @return true if you want to claim annotations after processing each round. Default is {@code false}. */
  protected boolean shouldClaimAnnotations() {
    return false;
  }

  /* Processor Mechanism */

  //TODO:
  // 1. Eliminate ElementName. Do we really need it? (causes some other methods like indexBy... to be also eliminated.)
  //    The naming is also not good. Especially because of forAnnotatedType. --> Possibly rename to TypeOrPackageElementName
  //    *** alot of TypeOrPackage in names. Ugly... fix
  // 1.2. equal implementation was broken. + Removed name(), and some nullchekinh and referred them to lombok
  // ------
  // 2. Rename vague fileds and methods:
  //    defferedElementNames --> illInformedElementNames

  /**
   * Ill-formed elements are deferred. For more information about well-formedness refer to {@link BaseAnnotationProcessor} documentation.
   */
  private final Set<TypeOrPackageElementName> illInformedTypeOrPackageElementNames = new LinkedHashSet<>();
  private final SetMultimap<ProcessingStep, TypeOrPackageElementName> typeOrPackageElementNamesDeferredByProcessingSteps = LinkedHashMultimap.create();

  private Elements eltUtils;
  private Types typeUtils;
  private Messager messager;
  private ImmutableList<? extends ProcessingStep> processingSteps;

  @Override
  public final synchronized void init(ProcessingEnvironment processingEnv) {
    super.init(processingEnv);
    this.eltUtils = processingEnv.getElementUtils();
    this.typeUtils = processingEnv.getTypeUtils();
    this.messager = processingEnv.getMessager();
    this.processingSteps = ImmutableList.copyOf( processingSteps() );
  }

  /**
   * Returns the set of supported annotation types as collected from registered
   * {@linkplain ProcessingStep}s.
   */
  @Override
  public final ImmutableSet<String> getSupportedAnnotationTypes() {
    checkState(processingSteps != null);
    return processingSteps.stream()
        .flatMap(processingStep -> processingStep.annotations().stream())
        .collect(toImmutableSet());
  }

  private ImmutableSet<TypeElement> getSupportedAnnotationTypeElements() {
    checkState(processingSteps != null);
    return processingSteps.stream()
        .flatMap(processingStep -> getSupportedAnnotationTypeElements(processingStep).stream())
        .collect(toImmutableSet());
  } //TODO needed?

  private ImmutableSet<TypeElement> getSupportedAnnotationTypeElements(ProcessingStep processingStep) { //TODO needed?
    return processingStep.annotations().stream()
        .map(eltUtils::getTypeElement)
        .filter(Objects::nonNull)
        .collect(toImmutableSet());
  }



  @Override
  public final boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
    checkState(eltUtils != null);
    checkState(messager != null);
    checkState(processingSteps != null);

    preRoundProcess(roundEnv);

    // If this is the last round, report all of the missing elements if there
    // were no errors raised in the round; otherwise reporting the missing
    // elements just adds noise to the output.
    if (roundEnv.processingOver()) {
      postRoundProcess(roundEnv);
      if (!roundEnv.errorRaised()) {
        reportMissingTypeOrPackageElements(
            ImmutableSet.<TypeOrPackageElementName>builder()
                .addAll(illInformedTypeOrPackageElementNames)
                .addAll(typeOrPackageElementNamesDeferredByProcessingSteps.values())
                .build());
      }
      return shouldClaimAnnotations();
    }

    process( getWellInformedElements(roundEnv) );

    postRoundProcess(roundEnv);

    return shouldClaimAnnotations();
  }

  private void reportMissingTypeOrPackageElements(Set<TypeOrPackageElementName> missingTypeOrPackageElementNames) {
    for (TypeOrPackageElementName missingTypeOrPackageElementName : missingTypeOrPackageElementNames) {
      Optional<? extends Element> missingTypeOrPackageElement = missingTypeOrPackageElementName.getElement(eltUtils); //TODO: well at least here having the element is better than having its name
      if (missingTypeOrPackageElement.isPresent()) {
        messager.printMessage(
            Diagnostic.Kind.ERROR,
            processingErrorMessage(
                "this " + missingTypeOrPackageElement.get().getKind().name() ),
            missingTypeOrPackageElement.get());
      }
      else {
        messager.printMessage( Diagnostic.Kind.ERROR, processingErrorMessage(missingTypeOrPackageElementName.getName()) );
      }
    }
  }

  private String processingErrorMessage(String target) {
    return String.format(
        "[AnnotationProcessorError: %s ::] %s was unable to process %s because not all of its dependencies could be "
            + "resolved. Check for compilation errors or a circular dependency with generated "
            + "code.",
        getClass().getSimpleName(), getClass().getCanonicalName(), target);
  }

  /**
   * Returns the valid annotated elements contained in all of the deferred elements. If none are
   * found for a deferred element, defers it again.
   */
  private ImmutableSetMultimap<TypeElement, Element> getWellInformedElements(RoundEnvironment roundEnv) {
    ImmutableSet<TypeOrPackageElementName> prevDeferredTypeOrPackageElementNames = ImmutableSet.copyOf(illInformedTypeOrPackageElementNames);
    illInformedTypeOrPackageElementNames.clear();

    //TODO mention what is does. IT is the gathering of elements phase
    ImmutableSetMultimap.Builder<TypeElement, Element> deferredElementsByAnnotationBuilder = ImmutableSetMultimap.builder(); //TODO Should this one be the Type or Package? Most probably not. #findAnnotatedElements add every kind of element
    for (TypeOrPackageElementName deferredTypeOrPackageElementName : prevDeferredTypeOrPackageElementNames) {
      Optional<? extends Element> deferredTypeOrPackageElement = deferredTypeOrPackageElementName.getElement(eltUtils); //TODO: again here better to have the element, PACKAGE and TYPE need different methods. That is what getElement will do
      if (deferredTypeOrPackageElement.isPresent()) {
        findAnnotatedElements( //It will add the element and its enclosed elements (excluding (inner) class and interface) if there is a matching annotation
            deferredTypeOrPackageElement.get(),
            getSupportedAnnotationTypeElements(), //TODO one use when Types are needed instead of string. NOT NEEDED THOUGH. CAN USE STRING INSTEAD
            deferredElementsByAnnotationBuilder //TODO not a good naming?
        );
      }
      else {
        illInformedTypeOrPackageElementNames.add(deferredTypeOrPackageElementName); //TODO Does it check the well-informeness. A bit vague
      }
    }

    ImmutableSetMultimap<TypeElement, Element> deferredElementsByAnnotation = deferredElementsByAnnotationBuilder.build();

    ImmutableSetMultimap.Builder<TypeElement, Element> validElements = ImmutableSetMultimap.builder(); //TODO rename to wellinformed?

    Set<TypeOrPackageElementName> validTypeOrPackageElementNames = new LinkedHashSet<>(); //TODO rename to wellinformed?

//     Look at the elements we've found and the new elements from this round and validate them.
    for (TypeElement annotationType : getSupportedAnnotationTypeElements()) { //TODO Another used of typeElement instead
      Set<? extends Element> roundElements = roundEnv.getElementsAnnotatedWith(annotationType); //TODO maybe pass it from process and use it here and above in the findAnnotated...
      ImmutableSet<Element> prevRoundElements = deferredElementsByAnnotation.get(annotationType); //TODO better name potential deffered or something ...
      for (Element element : Sets.union(roundElements, prevRoundElements)) {
        TypeOrPackageElementName typeOrPackageElementName = TypeOrPackageElementName.forAnnotatedElement(element); //TODO forAnnotated.. use
        boolean isValidElement = //TODO rename?
            validTypeOrPackageElementNames.contains(typeOrPackageElementName) ||
                ( !illInformedTypeOrPackageElementNames.contains(typeOrPackageElementName) &&
                    SuperficialValidation.validateElement(element.getKind() == ElementKind.PACKAGE ? element : getEnclosingType(element))
                );
        if (isValidElement) {
          validElements.put(annotationType, element);
          validTypeOrPackageElementNames.add(typeOrPackageElementName);
        } else {
          illInformedTypeOrPackageElementNames.add(typeOrPackageElementName);
        }
      }
    }

    return validElements.build();
  }

  /**
   * Adds {@code element} and its enclosed elements to {@code annotatedElements} if they are
   * annotated with any annotations in {@code annotationTypes}. Does not traverse to member types of
   * {@code element}, so that if {@code Outer} is passed in the example below, looking for
   * {@code @X}, then {@code Outer}, {@code Outer.foo}, and {@code Outer.foo()} will be added to the
   * multimap, but neither {@code Inner} nor its members will.
   *
   * <pre><code>
   *   {@literal @}X class Outer {
   *     {@literal @}X Object foo;
   *     {@literal @}X void foo() {}
   *     {@literal @}X static class Inner {
   *       {@literal @}X Object bar;
   *       {@literal @}X void bar() {}
   *     }
   *   }
   * </code></pre>
   */
  private static void findAnnotatedElements( //TODO rename
      Element element,
      ImmutableSet<TypeElement> annotationTypes,
      ImmutableSetMultimap.Builder<TypeElement, Element> annotatedElements) {
    for (Element enclosedElement : element.getEnclosedElements()) {
      if ( !MoreElements.isTypeElement(enclosedElement) ) {
        findAnnotatedElements(enclosedElement, annotationTypes, annotatedElements);
      }
    }

    // element.getEnclosedElements() does NOT return parameter elements
    // According to {@link Element} documentation, getEnclosedElements()
    // Returns the elements that are, loosely speaking, directly enclosed by this element.
    // A class or interface is considered to enclose the fields, methods, constructors, and member types that it directly declares.
    // A package encloses the top-level classes and interfaces within it, but is not considered to enclose subpackages.
    // Other kinds of elements are not currently considered to enclose any elements; however, that may change as this API or the programming language evolves.
    //
    // Note that elements of certain kinds can be isolated using methods in ElementFilter.
//    if (element instanceof ExecutableElement) { //TODO Report that this is not good practice instance of
    if (element.getKind() == ElementKind.METHOD || element.getKind() == ElementKind.CONSTRUCTOR) {
      for (Element parameterElement : MoreElements.asExecutable(element).getParameters()) {
        findAnnotatedElements(parameterElement, annotationTypes, annotatedElements);
      }
    }

    for (TypeElement annotationType : annotationTypes) {
      if (MoreElements.isAnnotationPresent(element, annotationType)) {
        annotatedElements.put(annotationType, element);
      }
    }
  }

  /** Processes the valid elements, including those previously deferred by each step. */
  private void process(ImmutableSetMultimap<TypeElement, Element> validElements) {  //TODO rename both process and validElement -> wellInformed
        for (ProcessingStep processingStep : this.processingSteps) {
          ImmutableSet<TypeElement> annotationTypes = getSupportedAnnotationTypeElements(processingStep); //TODO another instance to take a look at
          ImmutableSetMultimap<TypeElement, Element> procssingStepElements =
              new ImmutableSetMultimap.Builder<TypeElement, Element>()
                  .putAll( indexByAnnotation(typeOrPackageElementNamesDeferredByProcessingSteps.get(processingStep), annotationTypes) ) //From previouse deffered //TODO write that to remind that these are already validated
                  .putAll( filterKeys(validElements, Predicates.in(annotationTypes)) )
                  .build();
          if (procssingStepElements.isEmpty()) {
            typeOrPackageElementNamesDeferredByProcessingSteps.removeAll(processingStep);
          }
          else {
            Set<? extends Element> rejectedElements = processingStep.process(toClassNameKeyedMultimap(procssingStepElements));
            typeOrPackageElementNamesDeferredByProcessingSteps.replaceValues(processingStep, transform(rejectedElements, TypeOrPackageElementName::forAnnotatedElement)); //TODO TypeOrPackageElementName removal discussion
          }
        }
  }


  private static ImmutableSetMultimap<String, Element> toClassNameKeyedMultimap(SetMultimap<TypeElement, Element> elements) { //TODO rename
    ImmutableSetMultimap.Builder<String, Element> builder = ImmutableSetMultimap.builder();
    elements.asMap().forEach(
        (annotation, element) -> builder.putAll(annotation.getQualifiedName().toString(), element) //TODO another mess of Type and String
        );
    return builder.build();
  }

  private ImmutableSetMultimap<TypeElement, Element> indexByAnnotation(Set<TypeOrPackageElementName> annotatedTypeOrPackageElements, ImmutableSet<TypeElement> annotationTypes) { //TODO rename
    ImmutableSetMultimap.Builder<TypeElement, Element> deferredElements = ImmutableSetMultimap.builder(); //TODO previouesly deffered elements rename
    for (TypeOrPackageElementName typeOrPackageElementName : annotatedTypeOrPackageElements) {
      Optional<? extends Element> typeOrPackageElement = typeOrPackageElementName.getElement(eltUtils);
      if (typeOrPackageElement.isPresent())
        findAnnotatedElements(typeOrPackageElement.get(), annotationTypes, deferredElements);
    }
    return deferredElements.build();
  }

  /**
   * A package or type name.
   *
   * <p>It's unfortunate that we have to track types and packages separately, but since there are
   * two different methods to look them up in {@link Elements}, we end up with a lot of parallel
   * logic. :(
   *
   * <p>Packages declared (and annotated) in {@code package-info.java} are tracked as deferred
   * packages, type elements are tracked directly, and all other elements are tracked via their
   * nearest enclosing type.
   */
  @Data
  private static final class TypeOrPackageElementName {
    private enum Kind {
      PACKAGE_NAME,
      TYPE_NAME,
    }

    private final Kind kind;
    /** The fully-qualified name of the element. */
    private final String name;

    private TypeOrPackageElementName(@NonNull Kind kind, Name name) {
      this.kind = kind;
      this.name = name.toString();
    }

    /**
     * An {@link TypeOrPackageElementName} for an annotated element. If {@code element} is a package, uses the //TODO First sentence is problematic
     * fully qualified name of the package. If it's a type, uses its fully qualified name.
     * Otherwise, uses the fully-qualified name of the nearest enclosing type.
     */
    static TypeOrPackageElementName forAnnotatedElement(Element element) {
      return element.getKind() == ElementKind.PACKAGE
          //Here since getKing() is used not "instance of", simple casting will also work. Refer to {@link Element} documentation.
          ? new TypeOrPackageElementName(Kind.PACKAGE_NAME, MoreElements.asPackage(element).getQualifiedName())
          : new TypeOrPackageElementName(Kind.TYPE_NAME, getEnclosingType(element).getQualifiedName());
    }

    /**
     * The {@link Element} whose fully-qualified name is {@link #getName()}. Empty Optional if the relevant
     * method on {@link Elements} returns {@code null}.
     */
    Optional<? extends Element> getElement(Elements eltUtils) {
      return Optional.ofNullable(
          this.kind == Kind.PACKAGE_NAME
              ? eltUtils.getPackageElement(name)
              : eltUtils.getTypeElement(name));
    }

  }

}
